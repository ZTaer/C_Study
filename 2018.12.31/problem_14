0. 你觉得什么时候应该使用 while 语句，什么时候应该使用 for 语句？

	根据不同的情况，那个方便使用那个，简单的说看心情．
1. 请问 for 语句是入口条件循环还是出口条件循环。

	出口条件循环

2. 请问下边代码总共进行了多少次判断？v

	１０次＇

3. 请将下边的 for 语句写成 while 语句的表示方式。

	for ( ; ; )
	    ;

	 while(1){}

4. 请将下边的 while 语句写成 for 语句的表示形式。
	
	while ((ch = getchar()) != '\n')
	{
	        printf("%c", ch);

	i}


	#include <stdio.h>

	int main(){
		char ch;
		for(ch = getchar();ch != '\n'; ch=getchar() ){
			printf("%c",ch);
		}

		return 0;
	}

0. 小甲鱼经常要往北京寄潮汕牛肉丸，由于属于冰鲜食品，只能寄国内最快的顺丰速运了（反正邮费不是自己出 ）。
请写一个程序，帮小甲鱼计算 20 公斤内的运费。（顺丰起步价 23 元，每超一公斤加 14 元）



#include <stdio.h>

int main(){
	
	int kg , money;
	printf("公斤 ---花费(元)");
	for(kg=1;kg<=20;kg++){
		if(kg == 1){
			money = 23;
		}
		else{
			money += 14;
		}
		printf("  %d --- %d\n",kg,money);
	}

	return 0;
}




1. 写一个程序，对用户输入的整数进行求和。当用户输入任意字符时，结束程序并打印结果．
程序实现如下：


#include <stdio.h>
int main(){
	_Bool turn=1;
	char ch;
	int  result = 0;
	while(turn){
		printf("请输入合法的数字: ");
		ch = getchar();
		getchar();
		if(ch >= '0' && ch <= '9'){
			result = result + (ch - '0');
		}
		else{
			printf("结果是: %d",result);
			turn = 0;
			break;
		}	
	}

	return 0;
}

2. 为上一题的数字求和程序写一个 2.0 版本，请实现以下要求：
	A. 用户可以输入整数和浮点数来自：bbs.fishc.com
	B. 用户可以在同一行输入多个数字，数字之间可以是任意一个分隔符（如下图）
	C. 结果保留两位小数





#include <stdio.h>
#include <math.h>
#include <string.h>
// 思路
// 输入字符串循环检测
//
// 具体思路
// 	输入字符串"12abc2.56ww20"
// 	目的: 相当于12+25.56+20计算出结果
// 	创建str_sum(　接收一个字符串　)函数
// 	v2.0支持浮点数计算
//
// 	char *ch; 接受待处理的字符串
// 	_Bool turn = 1,poit_turn = 0,sum_turn = 0; 循环开关,小数点转换开关,控制tir与result结合的开关( 检测到多非0~9多个字符串时避免无意义的加减 )
//	int pos = 0,poit = 0;　记录位置, 记录小数点位置
//	float result ,tir ;结果 , 计算收集元素
//      
//      循环
// 	　如果到字符串'0'~'9'或者'.'范围
// 		  如果ch[pos] == '.'
// 		  	是: result = result + tir; 提交当前计算结果
// 		  	tir = 0; 清零重新开始
// 		  	poit = pos;　记录小说点位置
// 		  	poit_turn = 1;
// 		  	sum_turn = 1; 
// 		  	pos++;
// 		  	调到下一次循环
//
//
// 		　如果范围0~9: tir = tir*10 + ch[pos] - '0';
// 		　pos++;
// 		  sum_turn = 1;
// 		  跳到下一次循环
//
// 	  如果检测到其它范围( 不包括小数点 )
// 	  	  是( sum_turn = 1 ; poit_turn = 1 ): result = result + tir*pow( 10,-(pos - poit -1) ) ;tir = 0 ;poit =0;poit_turn = 0;sum_turn = 0;pos++;跳到下一次循环
// 	  	　是( sum_turn = 1 ; poit_turn = 0 ): result = result + tir;tir=0;sum_turn = 0;pos++;跳到下一次循环
// 	  	  
// 	  	  否: 
// 	  	  如果检测到'\0'停止循环
// 	          	结果result = result + tir;
// 	  	  pos++;跳到下一次循环
float str_sum(char *ch);
float str_sum(char *ch){
	_Bool turn = 1,poit_turn = 0,sum_turn =0;
	int pos =0,poit = 0;
	float result = 0,tir = 0;
	
	while (turn){
		if ((ch[pos] >= '0' && ch[pos] <= '9') || ch[pos] == '.'){
			if (ch[pos] == '.'){
				result = result + tir;
				tir = 0;
				poit = pos;
				poit_turn = 1;
				sum_turn = 1;
			}
			else if(ch[pos] >= '0' && ch[pos] <= '9'){
				tir = tir*10 + ch[pos] - '0';
				sum_turn = 1;
			}
			pos++;
			continue;

		}
		else{
			if( sum_turn && poit_turn ){ // tir值转换为小数
				result = result + tir*pow(10, (poit + 1 - pos));
				poit = 0;
				poit_turn = 0;
				sum_turn = 0;
				tir = 0;
				pos++;
				continue;
			}
			else if( sum_turn && !poit_turn ){
				result = result + tir;
				sum_turn = 0;
				tir = 0;
				pos++;
				continue;
			}

			if(ch[pos] == '\0'){
				turn = 0;
				break;

			}
			else{
				pos++;
				continue;
			}

		}
	}
	return result;

}

int main(){
	float result;
	char ch[]="";
	printf("input: ");
	scanf("%s",ch);
	result = str_sum(ch);
	printf("%.2f",result);
	
	return 0;

}

3.0 - -99乘法表


#include <stdio.h>

int main(){
	
	int i,j;
	for(i=9 ; i >= 1 ; i-- ){
		for(j=1 ; j <= i  ; j++){
			printf("%d*%d=%d  ",i,j,(i*j));
		}
		putchar('\n');
	}

	return 0;
}


